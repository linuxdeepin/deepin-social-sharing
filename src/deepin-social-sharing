#! /usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2014 ~ 2015 Deepin, Inc.
#               2014 ~ 2015 Wang Yaohua
#
# Author:     Wang Yaohua <mr.asianwang@gmail.com>
# Maintainer: Wang Yaohua <mr.asianwang@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import signal

from PyQt5.QtCore import Qt, QUrl
from PyQt5.QtQuick import QQuickView
from PyQt5.QtQml import QQmlApplicationEngine
from PyQt5.QtGui import QSurfaceFormat, QColor
from PyQt5.QtWidgets import QApplication
app = QApplication(sys.argv)
app.setQuitOnLastWindowClosed(True)

from constants import MAIN_QML
from accounts_manager import AccountsManager
from dbus_services import DBUS_NAME, DBUS_PATH
from dbus_services import DeepinSocialSharingAdaptor, session_bus
from dbus_interfaces import notificationsInterface

ACTION_ID_RESHARE = "action_id_reshare"

class QmlEngine(QQmlApplicationEngine):
    def __init__(self):
        super(QmlEngine, self).__init__()
        self._accounts_manager = AccountsManager()
        self._adapter = DeepinSocialSharingAdaptor(self)
        self._notificationId = None

        self.rootContext().setContextProperty("_accounts_manager",
                                              self._accounts_manager)

        self.load(QUrl.fromLocalFile(MAIN_QML))
        self.rootObject = self.rootObjects()[0]

        notificationsInterface.NotificationClosed.connect(self._notificationClosedCB)
        notificationsInterface.ActionInvoked.connect(self._actionInvokedCB)
        self._accounts_manager.failed.connect(self._shareSucceededCB)
        self._accounts_manager.succeeded.connect(self._shareFailedCB)

    def share(self, text, picture):
        self.rootObject.setText(text)
        self.rootObject.setScreenshot(picture)
        self.rootObject.show()

    def _shareSucceededCB(self):
        self._notificationId = notificationsInterface.notify(
            "Failed", "Failed", [ACTION_ID_RESHARE, "Reshare"])

    def _shareFailedCB(self):
        self._notificationId = notificationsInterface.notify(
            "Succeeded", "Succeeded")

    def _notificationClosedCB(self, notificationId):
        if notificationId == self._notificationId:
            self.rootObject.close()

    def _actionInvokedCB(self, notificationId, actionId):
        if notificationId == self._notificationId:
            if actionId == ACTION_ID_RESHARE:
                self._accounts_manager.reshare()

if __name__ == "__main__":
    engine = QmlEngine()

    session_bus.registerService(DBUS_NAME)
    session_bus.registerObject(DBUS_PATH, engine)

    signal.signal(signal.SIGINT, signal.SIG_DFL)
    sys.exit(app.exec_())
